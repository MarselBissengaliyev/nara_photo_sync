from config import (
    MOCK_CAMERA_PATH,
    DEST_ROOT,
    LOG_FILE,
    TELEGRAM_ENABLED,
    BOT_TOKEN,
)
from pathlib import Path
import shutil
from datetime import datetime
import logging
import requests
import json
import traceback

PHOTO_EXTENSIONS = {".jpg", ".jpeg", ".JPG", ".JPEG"}

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def is_new_file(file_path: Path, target_folder: Path) -> bool:
    return not (target_folder / file_path.name).exists()


def notify_telegram(message: str):
    if not TELEGRAM_ENABLED:
        logger.info(f"[TELEGRAM –ó–ê–ì–õ–£–®–ö–ê] {message}")
        return

    try:
        with open("subscribers.json", "r") as f:
            chat_ids = json.load(f)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å chat_ids: {e}")
        return

    for chat_id in chat_ids:
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                data={"chat_id": chat_id, "text": message},
                timeout=10
            )
            if response.status_code != 200:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Telegram error: {e}")


def copy_new_photos():
    try:
        if not MOCK_CAMERA_PATH.exists():
            msg = "‚ùå –ú–æ–∫-–ø–∞–ø–∫–∞ –∫–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            logger.error(msg)
            print(msg)
            return

        folder_name = datetime.now().strftime("%d%m%y_%H%M")
        dest_folder = DEST_ROOT / folder_name
        try:
            dest_folder.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {dest_folder}: {e}")
            return

        copied_files = []

        for photo in MOCK_CAMERA_PATH.iterdir():
            try:
                if photo.suffix in PHOTO_EXTENSIONS and photo.is_file():
                    if is_new_file(photo, dest_folder):
                        shutil.copy(photo, dest_folder / photo.name)
                        copied_files.append(photo.name)
                        logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {photo.name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {photo.name}: {e}")
                logger.debug(traceback.format_exc())

        if copied_files:
            msg = f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(copied_files)}"
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Ñ–æ—Ç–æ: {copied_files}")
            print(msg)
            notify_telegram(msg)
        else:
            msg = "‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            logger.info(msg)
            print(msg)
            notify_telegram(msg)

    except Exception as e:
        logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ copy_new_photos: {e}")
        logger.debug(traceback.format_exc())
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    logger.info("üì∑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    copy_new_photos()
